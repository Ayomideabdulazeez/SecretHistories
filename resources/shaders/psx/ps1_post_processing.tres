[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode unshaded, shadows_disabled, depth_test_disable, depth_draw_never;

uniform int color_depth : hint_range(1, 8) = 5;
uniform bool dithering = false;
uniform int resolution_scale = 4;

uniform bool brightness_correct = true;
uniform float pitch_black_threshold : hint_range(0.0, 0.51) = 0.116;
uniform float dithering_adjust = 10.0;

int dithering_pattern(ivec2 fragcoord) {
    const int pattern[] = {
        -4, +0, -3, +1, 
        +2, -2, +3, -1, 
        -3, +1, -4, +0, 
        +3, -1, +2, -2
    };
    
    int x = fragcoord.x % 4;
    int y = fragcoord.y % 4;
    
    return pattern[y * 4 + x];
}

void vertex() {
//    POSITION = vec4(VERTEX, 1.0);
    POSITION = vec4(VERTEX.xy, -1.0, 1.0);
}

float damp(float value) {
    float true_threshold = pitch_black_threshold * 0.01;
    if (value > true_threshold) {
        return value + (1.0 / pow(2.0, float(color_depth))) - true_threshold * (dithering_adjust * (dithering ? 1.0 : -2.0));
    }
    return value;
}

void fragment() {
    ivec2 uv = ivec2(FRAGCOORD.xy / float(resolution_scale));
    vec3 color = texelFetch(SCREEN_TEXTURE, uv * resolution_scale, 0).rgb;
    
    if (brightness_correct) {
        color.r = damp(color.r);
        color.g = damp(color.g);
        color.b = damp(color.b);
    }
    
    ivec3 c = ivec3(round(color * 255.0));
    
    // Apply the dithering pattern
    if (dithering) {
        c += ivec3(dithering_pattern(uv));
    }
    
    // Truncate from 8 bits to color_depth bits
    c >>= (8 - color_depth);
    
    // Convert back to [0.0, 1.0] range
    ALBEDO = vec3(c) / float(1 << color_depth);
}"
